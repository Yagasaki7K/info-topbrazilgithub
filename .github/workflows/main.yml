name: Update Top GitHub Users

on:
  schedule:
    - cron: "0 0 * * 1-5"  # Executa diariamente às 00:00, de segunda a sexta-feira
  workflow_dispatch:  # Permite execução manual

permissions:
  contents: write  # Permite escrita no repositório

jobs:
  update-users:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install PyGithub
      run: |
        pip install PyGithub

    - name: Run the update script and update README
      run: |
        python - <<EOF
        from github import Github
        from datetime import datetime, timedelta
        import time
        import os

        # Inicialize o cliente GitHub com o token do ambiente
        g = Github(os.getenv('GITHUB_TOKEN'))

        # Verifique o limite de taxa
        rate_limit = g.get_rate_limit().core
        if rate_limit.remaining == 0:
            reset_time = rate_limit.reset - datetime.now()
            sleep_time = max(reset_time.total_seconds(), 0)
            print(f"Rate limit exceeded. Sleeping for {sleep_time} seconds.")
            time.sleep(sleep_time)

        # Busque usuários
        query = 'location:Brazil sort:followers-desc'
        try:
            result = g.search_users(query)[:50]
        except Exception as e:
            print(f"Error fetching users: {e}")
            result = []

        # Gerar o conteúdo para o README.md
        top_users = []
        for user in result:
            # Buscar informações do perfil do usuário
            name = user.name or "N/A"
            company = user.company or "N/A"
            twitter_username = user.twitter_username or "N/A"
            location = user.location or "N/A"
            
            # Contagem de contribuições públicas nos repositórios públicos do usuário
            public_contributions = 0
            try:
                events = user.get_events()
                for event in events:
                    if event.type == 'PushEvent' and start_of_week <= event.created_at <= end_of_week:
                        public_contributions += 1
            except Exception as e:
                print(f"Error fetching contributions for user {user.login}: {e}")

            user_info = f"| {name} | {company} | {twitter_username} | {location} | {public_contributions} |"
            top_users.append(user_info)

        # Conteúdo a ser inserido no README.md
        top_users_content = "\n".join(top_users)
        new_content = f"<!-- START TOP USERS -->\n| Name | Company | Twitter Username | Location | Public Contributions |\n|------|---------|------------------|----------|---------------------|\n{top_users_content}\n<!-- END TOP USERS -->"

        # Ler e atualizar o README.md
        with open('README.md', 'r') as file:
            readme_content = file.read()

        updated_readme = readme_content.split('<!-- START TOP USERS -->')[0] + new_content + readme_content.split('<!-- END TOP USERS -->')[1]

        with open('README.md', 'w') as file:
            file.write(updated_readme)
        EOF

    - name: Configure Git user
      run: |
        git config --global user.email "anderson18.marlon@gmail.com"
        git config --global user.name "GitHub Actions"

    - name: Commit and push changes
      run: |
        git add README.md
        git commit -m "Update Top 50 Brazilian GitHub Users [skip ci]"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
